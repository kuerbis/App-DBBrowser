#!/usr/bin/env perl
use warnings;
use strict;
use 5.008003;

our $VERSION = '2.051';

use Term::Choose::Constants qw( :screen );

use App::DBBrowser;

binmode STDIN,  ':encoding(utf-8)';
binmode STDOUT, ':encoding(utf-8)';
binmode STDERR, ':encoding(utf-8)';

my $old_out_codepage;

BEGIN {
    if ( $^O eq "MSWin32" ) {
        require Win32::Console;
        require Win32::Console::ANSI;
        $old_out_codepage = Win32::Console::OutputCP();
        Win32::Console::OutputCP( 65001 );
        print "\e(U";
    }
}

END {
    print SHOW_CURSOR;
    if ( $^O eq "MSWin32" && $old_out_codepage ) {
        Win32::Console::OutputCP( $old_out_codepage );
    }
}

print HIDE_CURSOR;

my $db_browser = App::DBBrowser->new();
$db_browser->run();


__END__

=pod

=encoding UTF-8

=head1 NAME

C<db-browser> - Browse C<SQLite>/C<MySQL>/C<PostgreSQL> databases and their tables interactively.

=head1 VERSION

Version 2.051

=cut

=head1 SYNOPSIS

=head2 SQLite/MySQL/PostgreSQL

    db-browser -h|--help

    db-browser

    db-browser database-name, ...

When the C<db-browser> is called with the argument C<-h|--help>, it shows a menu. The menu entry I<HELP> shows this
documentation - see L</OPTIONS>.

If C<db-browser> is called without arguments, the user can choose from the databases offered by the database plugin. The
database is chosen automatically if only one database is available. With the C<SQLite> driver in use, the option
I<Search directories> tells the database plugin where to search for C<SQLite> databases (defaults to the home directory).

If C<db-browser> is called with arguments, the arguments are used as the available databases.

=head2 SQLite

    db-browser -s|--search

C<db-browser> called with C<-s|--search> causes a new search for C<SQLite> databases instead of using the cached data.

=head1 DESCRIPTION

Before using C<db-browser>, make sure you backed up your databases.

Search and read in SQL databases: one can browse databases and their tables interactively.

The database plugins bundled with C<App::DBBrowser> provide support for the DBI drivers C<DBD::SQLite>, C<DBD::mysql>,
C<DBD::MariaDB> and C<DBD::Pg>. See L<App::DBBrowser::DB> how to write a database plugin.

=head1 NAVIGATION

=head2 Menus

=over

=item *

the C<Arrow> keys (or C<h,j,k,l>) to move up and down and to move to the right and to the left.

=item *

the C<PageUp> key (or C<Ctrl-B>) to go back one page, the C<PageDown> key (or C<Ctrl-F>) to go forward one page.

=item *

the C<Home> key (or C<Ctrl-A>) to jump to the beginning of the menu, the C<End> key (or C<Ctrl-E>) to jump to the end
of the menu.

=back

With the option I<mouse> enabled it can be used the mouse with the left mouse key to navigate through the menus.

To confirm a chosen menu item use the C<Return> key.

In some sub-menus it is possible to select more then one item before C<Return> is pressed (for example I<Choose Rows>
and I<Choose Columns> from the input filter - see L</Insert Into>); in such sub-menus the list of items marked with the
C<SpaceBar> are added to the chosen items when C<Return> is pressed. If a mouse mode is enabled, it can be used the
right mouse key instead of the C<SpaceBar>. A C<Ctrl-SpaceBar> inverts the made choices - so for example to select all
but one select the one with the C<SpaceBar> and then press C<Ctrl-SpaceBar>.

=head2 Read-line

=over

=item *

C<BackSpace> or C<Strg-H> to delete the character behind the cursor, C<Delete> to delete  the  character at point.

=item *

C<Strg-U> to delete the text backward from the cursor to the beginning of the line, C<Strg-K> to delete the text from
the cursor to the end of the line.

=item *

C<Right-Arrow> to move forward a character, C<Left-Arrow> to move back a character.

=item *

C<Up-Arrow> to move back 10 characters, C<Down-Arrow> to move forward 10 characters.

=item *

C<Home> or C<Strg-A> to move to the start of the line, C<End> or C<Strg-E> to move to the end of the line.

=back

To leave a C<read-line> without returning anything press C<Ctrl-D>. When the input puffer is empty and an C<Enter> is
pressed, C<read-line> returns an empty string.

=head1 OUTPUT

The elements are right-justified if they look like a number else they are left-justified.

Leading and trailing spaces are removed from the elements and spaces are squashed to a single white-space if the option
I<squash_spaces> is enabled.

Tab characters (C<\t>) are replaces with a space.

Vertical spaces (C<\v>) are squashed to two spaces

Control characters, code points of the surrogate ranges and non-characters are removed.

See also the option group L</Output>.

=head1 MENUS

=head2 Plugin Menu

Choosing a plugin leads to the I<Database Menu>.

If there is only one plugin, the menu is not shown but the plugin is chosen automatically.

=head2 Database Menu

Choosing a database leads to the I<Schema Menu>.

If there is only one database, the menu is not shown but the database is chosen automatically.

=head2 Schema Menu

Choosing a schema leads to the I<Table Menu>.

If there is not more than one schema, this menu is not shown but the schema is chosen automatically.

=head2 Table Menu

The menu entries of the table menu:

=head3 Prompt Line

Selecting the prompt line (the database name) opens a menu with these entries:

=head4 Create Table

Selecting I<Create Table> opens a sub-menu with these entries:

=over

=item Plain

Create a table.

=item Copy and Paste

Reads from STDIN until the end of input. Then it creates a table and inserts the records of fields parsed from the input
data. In the I<Settings> one can configure how the data is parsed.

See also L</Create Table>.

=item From File

Like I<Copy and Paste> with the difference that the data is read from a chosen file.

=item Settings

Selecting I<Settings> allows one to set the options described in the option group L</Insert Into> for the current
database.

=back

=head4 Drop table

Drop a table. The whole table is shown (if not empty) before the user confirms to drop the table.

=head4 Attache DB

I<Attache DB> is available only for C<SQLite> databases. I<Attach DB> can be used to attach databases to the current
database.

=head4 Detach DB

This entry is available if a C<SQLite> database has attached databases.

=head3 Tables

Choosing a table leads to the I<SQL Menu>.

=head3 Derived

Choosing this entry allows one to enter a subquery and use it as a table.

This entry is available only if enabled in L</Subqueries>.

=head3 Join

Join tables.

In the I<foreign-key> menu one can choose a different comparison operator by selecting the prompt line (I<Choose FOREIGN
KEY column:>).

=head3 Union

Combine the result from multiple SELECT statements.

=head3 Settings

See L</DB Settings>.

=head2 SQL Menu

In this menu it can be formed the SQL query.

The SQL Menu has the following menu entries:

=head3 Prompt Line

Selecting this prompt line (I<Customize:>) opens a menu with these entries:

(C<DELETE>, C<UPDATE> or C<INSERT INTO> are not available with C<JOIN> and C<UNION> statements (except C<INSERT> with
C<mysql> and C<JOIN>))

=head4 Insert Into

Three different ways to insert data into a table are available:

=over

=item Plain

Insert data column by column.

=item Copy and Paste

Multi line input: reads until the end of input. It is OS-depend how to indicate the end of input.

=item From File

Read the input from am file. Supported file formats: text files and file formats supported by L<Spreadsheet::Read>.

=back

If the first column of a table is an auto-increment column, the C<INSERT INTO> statement is build without this first
column. This feature is available if it is supported by the database plugin.

Input filters:

=over

=item Choose Columns

Use only selected columns of the imported data.

If the imported data has empty columns, the non-empty columns are preselected. Columns are regarded as empty if the
values of all fields in the column - including the column header - have no length.

=item Choose Rows

Use only selected rows of the imported data.

If the input has rows with different numbers of columns, this filter sorts the rows in groups with the same number of
columns. The user can then select the group of rows which should be used.

=item A Range of Rows

Use only a range of rows.

=item Add Column

Add an empty column: adds a column to the header row and adjusts the remaining rows to the length of the header row.

If the input has rows with different numbers of columns, use first I<Choose Rows> to select the rows to use.

=item Cols_to_Rows

Transpose columns to rows.

=item Empty_to_NULL

Convert fields containing an empty string to NULL (undefined).

With I<Plain> and I<Copy & Paste> this filter is enabled by default.

=item Reset

Reset the filters to the default values.

=back

=head4 Update

Update records.

See also L</Extended SET> and L</Extended WHERE>

=head4 Delete

Delete records.

=head3 Print TABLE

Select I<Print TABLE> to show the result of the formed statement on the screen.

=head3 The Sub-Statements

To reset a SQL "sub-statement" (e.g C<WHERE>) re-enter into the respective menu and choose C<-OK->.

See also L</Extensions>, L</Parentheses>, L</Operators>

=head4 SELECT

Choose the required columns for the C<SELECT> sub-statement.

It is possible to ad many columns at once by marking them with the C<SpaceBar> key. If columns are marked with the
C<SpaceBar>, the highlighted column is not added to the chosen when C<Return> is pressed.

If an I<AGGREGATE> function or a I<GROUP BY> columns is selected, the available choices of this sub-statement are the
selected aggregate functions and the selected group-by columns.

=head4 AGGREGATE

C<AVG>, C<COUNT>, C<COUNT(*)>, C<GROUP_CONCAT>/C<STRING_AGG>, C<MAX>, C<MIN>, C<SUM>

=head4 DISTINCT

=head4 WHERE

=head4 GROUP BY

It is possible to ad many columns at once by marking them with the C<SpaceBar> key. If columns are marked with the
C<SpaceBar>, the highlighted column is not added to the chosen when C<Return> is pressed.

=head4 HAVING

=head4 ORDER BY

=head4 LIMIT

=head3 Reset

Reset the SQL statement.

=head1 OPTIONS

The options menu is called with C<db-browser -h>.

=head2 HELP

Show this documentation.

=head2 Path

Shows the version and the path of the running C<db-browser> and the path of the application directory.

=head2 DB

=head3 DB Plugins

Choose the required database plugins.

=head3 DB Settings

These driver specific I<DB Settings> are used as the default database settings.

There is also in each L</Table Menu> the entry I<Settings> to make database specific settings. If no database specific
settings are set, these global (to the database plugin) I<DB Settings> are used.

User defined database plugins: it depends on the plugin which items are offered to set in each option and whether the
selections made by the user are considered.

=over

=item Fields

Set which fields are required to connect to a database.

=item ENV Variables

The user can choose environment variables form a list of environment variables that should be used - if set - to connect
to the database.

=item Login Data

The entered login data is saved in a configuration file and used to connect to the database (the password can not be
saved).

=item Attributes

For the meaning of these driver specific attributes check the appropriate driver documentation.

=item Reset DB

Reset database specific parameter to the global I<DB Settings>.

=back

=head2 Menu

Set the behavior of the interactive menus.

=head3 Menu Memory

If enabled: saves the menu position while entering in a sub menu.

=head3 Table

Expand table rows:

=over

=item C<YES>

if C<Return> is pressed, the selected table row is printed with each column in its own line.

=item C<NO>

don't expand table rows.

=item C<YES fast back>

do not expand the first row if the cursor auto-jumped to the first row.

=back

=head3 Info

Before records are deleted/updated or before a table is dropped the affected records are shown in an info-table.

Expand info tables rows:

=over

=item C<YES>

if C<Return> is pressed, the selected table row is printed with each column in its own line.

=item C<NO>

don't expand table rows.

=item C<YES fast back>

do not expand the first row if the cursor auto-jumped to the first row.

=back

=head3 Mouse Mode

Set the I<Mouse Mode> (see L<Term::Choose/mouse>).

=head2 SQL

=head3 Metadata

If I<Metadata> is enabled, system tables/schemas/databases are appended to the respective list.

=head3 Operators

Choose the required operators.

There are two regexp entries: C<REGEXP> matches case sensitive while C<REGEXP_i> matches case insensitive.

With C<MySQL> the sensitive match is achieved by enabling the C<BINARY> operator.

=head3 Max Rows

Sets C<LIMIT> automatically to I<Max Rows>. This can be overwritten by setting a SQL C<LIMIT> statement manually.
Fetched table rows are kept in memory.

To disable the automatic limit set I<Auto Limit> to C<0>.

=head3 Extensions

Select which menu extensions should be available:

=over

=item Extensions SELECT

Values: I<None>, I<Func>, I<SQ> and I<Func/SQ>

=item Extensions WHERE

Values: I<None>, I<Func>, I<SQ> and I<Func/SQ>

=item Extensions HAVING

Values: I<None>, I<Func>, I<SQ> and I<Func/SQ>

=item Extensions SET

Values: I<None>, I<Func>, I<SQ>, I<=N> and I<Func/SQ/=N>

=item Extensions Table

Values: I<None> and I<SQ>

=item Extensions Join

Values: I<None> and I<SQ>

=item Extensions Union

Values: I<None> and I<SQ>

=back

If set to I<None>, no menu extensions are available.

If set to I<Func>, C<f()> is shown as additionally menu entry. Selecting C<f()> opens the L</Functions> menu.

If set to I<SQ>, C<SQ> is shown as additionally menu entry. Selecting C<SQ> opens the L</Subqueries> menu. (In the
table-, join- and union-menus C<Derived> is used instead of C<SQ>.)

If set to I<=N>, C<=N> is shown as additionally menu entry (available only after the C<SET> in an C<UPDATE> statement).
Selecting C<=N> sets the column to C<NULL>.

If set to I<Func/SQ> (or I<Func/SQ/=N>), C<%%> is shown as additionally menu entry. Selecting C<%%> lets one choose
between all available extensions.

If these menu entries are prefixed with C<=>, it is required to select the wanted operator I<after> the extended menu
entry has been chosen.

=head4 Functions

=over

=item Concatenate

=item Truncate

=item Bit_Length

=item Char_Length

=item Epoch_to_Date

=item Epoch_to_DateTime

=back

=head4 Subqueries

Selecting a subquery menu entry opens a subquery sub-menu which allows one the enter a subquery (I<Read-Line>).

If stored or temporarily stored subqueries are available, it is also possible to select one of those subqueries instead
of entering a subquery.

A subquery can be saved or removed in the sub-menu which opens by selecting the prompt line of a subquery menu
(I<Choose SQ:>).

The last subqueries entered in the subquery menu and the last statements printed with I<Print TABLE> are stored
temporarily.

=head3 Aliases

If enabled, it is asked for an alias. If entered nothing, no alias is added except for joined tables and unions and for
derived tables which get then a default alias.

=over

=item Aggregate

=item Functions

=item Join

=item Subqueries

=item Union

=back

=head3 Parentheses

Enable parentheses in C<WHERE> and/or C<HAVING> clauses.

=head3 Identifiers

=over

=item Qualified table names

If set to C<YES>, qualified table names are used in SQL statements.

=item Quote identifiers

If set to C<YES>, SQL identifiers are quoted.

=back

C<SQLite>:

- databases in SQL statements (C<ATTACH DATABASE>) are always quoted.

- if the current database has attached databases, the use of qualified table names is enabled automatically.

=head3 Write access

Enable write access - use with care.

=over

=item Insert records

=item Update records

=item Delete records

=item Create table

=item Drop table

=back

=head2 Output

=head3 Colwidth

Columns with a width below or equal I<Colwidth> are only trimmed if it is still required to lower the row width despite
all columns wider than I<Colwidth> have been trimmed to I<Colwidth>.

=head3 ProgressBar

Set the progress bar threshold. If the number of fields (rows x columns) is higher than the threshold, a progress bar is
shown while preparing the data for the output.

=head3 Tabwidth

Set the number of spaces between columns.

=head3 Grid

Separate the columns from each other and the header from the body with lines.

=head3 Color

Enables the support for color and text formatting escape sequences (SGR) if set to C<Enable>. Before the output it is
added a reset (C<\e[0m>) at the end of each row.

=head3 Keep Header

Show the table header on top of each page.

=head3 Undef

Set the string that will be shown on the screen instead of an undefined field.

On C<MSWin32> only single-byte character sets are supported when entering the setting I<Undef>, I<user>, I<host> or
I<port> with the C<db-browser>s readline. But it is possible to edit the entry in configuration files directly after the
entry was created with this options menu.

=head3 Binary binary

Setting the I<binary_filter> to C<1> means: print "BNRY" instead of arbitrary binary data. If data matches the repexp
C</[\x00-\x08\x0B-\x0C\x0E-\x1F]/>, it is considered arbitrary binary data. Printing arbitrary binary data could break
the output.

=head3 Squash spaces

If I<squash_spaces> is enabled, consecutive spaces are squashed to one space and leading and trailing spaces are removed.

=head3 Decimal separator

Set the decimal separator. Numbers with a decimal separator are formatted as number if this option is set to the right
value.

Allowed values: a character with a print width of C<1>. If an invalid value is passed, I<decimal_separator> falls back
to the default value (dot).

=head3 Warnings

Enable/disable C<File::Find> warnings when searching for C<SQLite> databases.

=head2 Insert Into

=head3 Parse Tool

Set how to parse text files or the "multi row" input. Files where C<-T $filename> returns true are considered text
files.

If a file is not a text file, then it is always used C<Spreadsheet::Read> to parse the file regardless of this setting.

=over

=item

Text::CSV

To decode the files it is used the I<File encoding>.

Advantages:

=over

=item

Allows to set different csv-related options.

=back

=back

=over

=item

split

Reads to whole input at once and splits the input with the input record separator (IRS) to get the records (rows). Then
it splits the records with the input field separator (IFS) to get the fields (columns) of each record.

To decode the files it is used the I<File encoding>.

Advantages:

=over

=item

The values assigned to the IRS and the IFS are treated as regexps.

=back

=back

=over

=item

Spreadsheet::Read

If C<Spreadsheet::Read> is chosen, the default settings from L<Spreadsheet::Read> are used.

C<Spreadsheet::Read> will use the first line of the file to auto-detect the separation character if the file is a
csv-file.

Advantages:

=over

=item

Auto-detects the separation character for csv-files

=back

=back

=over

=back

=head3 Text::CSV config

Set different L<Text::CSV> options.

=head3 'split' config

=over

=item

Record separator

Set the input record separator (regexp).

=item

Trim record left

Expects a regex pattern. If set, removes leading characters matching regexp from each record.

=item

Trim record right

Expects a regex pattern. If set, removes trailing characters matching regexp from each record.

=item

Field separator

Set the input field separator (regexp).

=item

Trim field left

Expects a regex pattern. If set, removes leading characters matching regexp from each field.

=item

Trim field right

Expects a regex pattern. If set, removes trailing characters matching regexp from each field.

=back

=head3 File encoding

How to decode text files.

=head3 File History

Set how many input file names should be saved. A value of C<0> disables the file history.

=head2 Create Table

=head3 Data type guessing

If this option is enabled and a table is created, C<SQL::Type::Guess> is used to detect the data types. These data types
are then used as default values when the user is asked for the data types.

=head3 Auto increment

Setting I<Auto increment> to a value which is not the empty string enables the option to set an auto increment column
when creating a table. The value set here is then used as the default name for the auto increment column.

=head1 CONFIGURATION FILES

To find out the location of the configuration files call C<db-browser -h> and choose I<Path>. The data is saved in JSON
format.

=head1 REQUIREMENTS

See L<Term::TablePrint/REQUIREMENTS>.

=head2 Perl version

Requires Perl version 5.8.3 or greater.

=head2 Decoded strings

C<db-browser> expects decoded strings.

Non mappable characters will break the output.

=head2 Terminal

It is required a terminal that uses a monospaced font which supports the printed characters.

The terminal has to understand ANSI escape sequences. If the OS is MSWin32 C<App::DBBrowser> uses
L<Win32::Console::ANSI> which emulates an ANSI console for the C<db-browser>.

=head2 Permissions

To be able to browse the database-, schema- and table-lists and the content of tables the user must have the database
privileges required for fetching the requested data.

The C<db-browser> expects an existing home directory with read and write permissions for the user of the C<db-browser>.

=head1 CREDITS

Thanks to the L<Perl-Community.de|http://www.perl-community.de> and the people form
L<stackoverflow|http://stackoverflow.com> for the help.

=head1 AUTHOR

Matthäus Kiem <cuer2s@gmail.com>

=head1 LICENSE AND COPYRIGHT

Copyright 2012-2019 Matthäus Kiem.

THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE
IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.

This program is free software; you can redistribute it and/or modify it under the same terms as Perl 5.10.0. For
details, see the full text of the licenses in the file LICENSE.

=cut
